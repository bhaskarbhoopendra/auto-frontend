import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define the API slice for categories
export const categoryApi = createApi({
  reducerPath: "categoryApi",
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.REACT_APP_API_BASE_URL || "http://localhost:3000/api", // Replace with your actual API base URL
  }),
  tagTypes: ["Category"], // Use tags for cache invalidation
  endpoints: (builder) => ({
    // Fetch all categories
    getAllCategories: builder.query({
      query: () => "/categories", // Endpoint to fetch all categories
      providesTags: ["Category"],
    }),

    // Fetch a single category by ID
    getOneCategory: builder.query({
      query: (id) => `/categories/get/${id}`, // Endpoint to fetch a category by ID
      transformResponse: (response) => response.data, // Assuming the response structure is wrapped in 'data'
      providesTags: (result, error, id) => [{ type: "Category", id }],
    }),

    // Create a new category
    createCategory: builder.mutation({
      query: (categoryData) => ({
        url: "/categories/create", // Endpoint to create a new category
        method: "POST",
        body: categoryData, // Pass the category data in the body
      }),
      invalidatesTags: ["Category"], // Invalidate the cache for categories
    }),

    // Update a category by ID
    editCategory: builder.mutation({
      query: ({ id, categoryData }) => ({
        url: `/categories/update/${id}`, // Endpoint to update a category by ID
        method: "PUT",
        body: categoryData, // Pass the updated category data in the body
      }),
      invalidatesTags: (result, error, { id }) => [{ type: "Category", id }],
    }),

    // Delete a category by ID
    deleteCategory: builder.mutation({
      query: (id) => ({
        url: `/categories/delete/${id}`, // Endpoint to delete a category by ID
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [{ type: "Category", id }],
    }),
  }),
});

// Export the hooks generated by the slice
export const {
  useGetAllCategoriesQuery,
  useGetOneCategoryQuery,
  useCreateCategoryMutation,
  useEditCategoryMutation,
  useDeleteCategoryMutation,
  
} = categoryApi;
