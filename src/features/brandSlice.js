import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define the API slice
export const brandApi = createApi({
  reducerPath: "brandApi",
  baseQuery: fetchBaseQuery({
    baseUrl: process.env.REACT_APP_API_BASE_URL || "http://localhost:3000/api", // Replace with your actual API base URL
  }),
  tagTypes: ["Brand", "Category"], // Use tags for cache invalidation
  endpoints: (builder) => ({
    // Fetch all brands
    getAllBrands: builder.query({
      query: () => "/brands",
      // transformResponse: (response) => response.data,
      providesTags: ["Brand"],
    }),

    // Fetch a single brand by ID
    getOneBrand: builder.query({
      query: (id) => `/brands/get/${id}`,
      transformResponse: (response) => response.data, // Ensure the correct structure
      providesTags: (result, error, id) => [{ type: "Brand", id }],
    }),

    getBrandsWithCategories: builder.mutation({
      query: (payload) => ({
        url: "/brands/with-categories",
        method: "POST",
        body: payload,
      }),
      invalidatesTags: ["Brand"],
    }),

    // Create a new brand
    createBrand: builder.mutation({
      query: (brandData) => ({
        url: "/brands/create",
        method: "POST",
        body: brandData,
      }),
      invalidatesTags: ["Brand"],
    }),

    // Update a brand by ID
    editBrand: builder.mutation({
      query: ({ id, brandData }) => ({
        url: `/brands/update/${id}`,
        method: "PUT",
        body: brandData,
      }),
      invalidatesTags: (result, error, { id }) => [{ type: "Brand", id }],
    }),

    // Delete a brand by ID
    deleteBrand: builder.mutation({
      query: (id) => ({
        url: `/brands/delete/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: (result, error, id) => [{ type: "Brand", id }],
    }),
  }),
});

// Export the hooks generated by the slice
export const {
  useGetAllBrandsQuery,
  useGetOneBrandQuery,
  useGetBrandsWithCategoriesMutation,
  useCreateBrandMutation,
  useEditBrandMutation,
  useDeleteBrandMutation,
} = brandApi;
